        
name: Build/release
on: push
jobs:
  release:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write

    strategy:
      matrix:
        # os: [macos-latest, ubuntu-latest, windows-latest]
        os: [macos-latest]
        # os: [ubuntu-latest,macos-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      #new add on for debugging
      - name: Print repository info
        run: |
          echo "Repository owner is ${{ github.repository_owner }}"
          echo "Repository is ${{ github.repository }}"
    
      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v2
        with:
          node-version: 21.7.1

    
      - name: Select Xcode Version
        if: startsWith(matrix.os, 'macos')
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '13.1.0'

      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@v1
        # Only install Snapcraft on Ubuntu
        if: startsWith(matrix.os, 'ubuntu')
        with:
          # Log in to Snap Store
          snapcraft_token: ${{ secrets.snapcraft_token }}
  

      - name: Build and Release AppImage
        uses: samuelmeuli/action-electron-builder@v1
        if: startsWith(matrix.os, 'ubuntu') # Ensure this step only runs on Ubuntu
        with:
          # This will automatically package your app as an AppImage
          args: --linux AppImage
          github_token: ${{ secrets.GITHUB_TOKEN}}
        # env:
        #   DEBUG: electron-builder # Set the DEBUG environment variable 
   
    
      - name: Prepare for app notarization
        if: startsWith(matrix.os, 'macos')
        # Import Apple API key for app notarization on macOS
        run: |
          mkdir -p ~/private_keys/
          echo '${{ secrets.API_KEY }}' > ~/private_keys/AuthKey_${{ secrets.API_KEY_ID }}.p8

      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1     
        if: startsWith(matrix.os, 'macos') 
        with:
          github_token: ${{ secrets.GITHUB_TOKEN}}
          mac_certs: ${{ secrets.mac_certs }}
          mac_certs_password: ${{ secrets.mac_certs_password }}
          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}

        # env:
        # #   # macOS notarization API key
        # #   # API_KEY_ID: ${{ secrets.API_KEY_ID }}
        # #   # API_KEY_ISSUER_ID: ${{ secrets.API_KEY_ISSUER_ID }}
        # #   # APPLEID: ${{ secrets.APPLEID }}
        # #   # APPLEIDPASS: ${{ secrets.APPLEIDPASS }}      
          # API_KEY_ID: 3YK6J5LXFG     
          # API_KEY_ISSUER_ID: 8ec4fd53-115a-4083-9abd-8c3fe9f95ed3    
        #   APPLEID: harvilabusc@gmail.com
        #   APPLEIDPASS: cuai-ekki-zruw-dzsr
        # #   MY_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Install notarytool (if needed)
        run: xcrun notarytool || (echo "notarytool not found, please ensure Xcode 13 or later is installed" && exit 1)
        if: startsWith(matrix.os, 'macos')

      - name: List contents of the dist directory
        run: ls -la dist/

      - name: Notarize with notarytool using app-specific password
        if: startsWith(matrix.os, 'macos')
        env:
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # ISSUER_UUID: ${{ secrets.ISSUER_UUID }}
          # API_KEY_ID: ${{ secrets.API_KEY_ID }}
          # API_KEY_PATH: ./private_keys/AuthKey_3YK6J5LXFG.p8 
          APPLE_ID: harvilabusc@gmail.com
          ISSUER_UUID: 8ec4fd53-115a-4083-9abd-8c3fe9f95ed3
          API_KEY_ID: 3YK6J5LXFG
          API_KEY_PATH: ./private_keys/AuthKey_3YK6J5LXFG.p8 
          DEBUG: electron-builder
        run: |
          xcrun notarytool submit dist/electron_test3-1.0.3.dmg \
              --issuer $ISSUER_UUID \
              --key-id $API_KEY_ID \
              --key $API_KEY_PATH \
              --apple-id $APPLE_ID


      - name: Extract Tag Name
        id: extract_tag
        run: echo "::set-output name=tag::$(echo ${{ github.ref }} | sed 's/refs\/tags\///')"
        shell: bash

      # - name: List contents of the dist directory
      #   run: ls -la dist/
     
    
      - name: Upload DMG to release
        if: runner.os == 'macOS'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/electron_test3-1.0.3.dmg
          asset_name: electron_test3-1.0.3.dmg
          
          # tag: ${{ github.ref }}
          tag: ${{ steps.extract_tag.outputs.tag }}

          overwrite: true
          body: "This is my release text for DMG. " 

      - name: Upload AppImage to release
        if: runner.os == 'Linux'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
        
          file: dist/electron_test3-1.0.3.AppImage
          asset_name: electron_test3-1.0.3.AppImage
        
          # tag: ${{ github.ref }}
          tag: ${{ steps.extract_tag.outputs.tag }}

          overwrite: true
          body: "This is my release text for AppImage. " 

                